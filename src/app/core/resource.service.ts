import { Injectable, inject } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../environments/environment';

// üö® Interface simple pour la ressource (vous pouvez l'√©tendre au besoin)
export interface Resource {
  id: string;
  name: string;
  type: 'ROOM' | 'EQUIPMENT';
  description: string;
  ownerId: string;
  createdAt: Date;
}

export interface ResourceFilters {
  search?: string;
  type?: 'ROOM' | 'EQUIPMENT';
}

@Injectable({
  providedIn: 'root',
})
export class ResourceService {
  private readonly apiUrl = environment.apiUrl + '/resources';
  private http = inject(HttpClient);

  /**
   * Liste toutes les ressources avec des filtres optionnels.
   */
  getAllResources(filters?: ResourceFilters): Observable<any[]> {
    let params = new HttpParams();

    // Construction des param√®tres de requ√™te
    if (filters) {
      if (filters.search) {
        params = params.set('search', filters.search);
      }
      if (filters.type) {
        params = params.set('type', filters.type);
      }
    }

    // Passe les param√®tres √† la requ√™te
    return this.http.get<any[]>(this.apiUrl, { params });
  }

  /**
   * R√©cup√®re les ressources appartenant √† l'utilisateur connect√© (pour la gestion)
   * Corresponds √† GET /resources/mine
   */
  getMyResources(): Observable<Resource[]> {
    return this.http.get<Resource[]>(`${this.apiUrl}/mine`);
  }

  // Les m√©thodes CRUD (create, update, delete) seront ajout√©es plus tard
  /**
   * R√©cup√®re une ressource par son ID
   * Corresponds √† GET /resources/:id
   */
  getResourceById(id: string): Observable<Resource> {
    return this.http.get<Resource>(`${this.apiUrl}/${id}`);
  }

  /**
   * Cr√©e une nouvelle ressource
   * Corresponds √† POST /resources
   */
  createResource(
    resourceData: Omit<Resource, 'id' | 'ownerId' | 'createdAt'>
  ): Observable<Resource> {
    return this.http.post<Resource>(this.apiUrl, resourceData);
  }

  /**
   * Met √† jour une ressource existante
   * Corresponds √† PATCH /resources/:id
   */
  updateResource(
    id: string,
    resourceData: Partial<Omit<Resource, 'id' | 'ownerId' | 'createdAt'>>
  ): Observable<Resource> {
    return this.http.patch<Resource>(`${this.apiUrl}/${id}`, resourceData);
  }

  /**
   * Supprime une ressource
   * Corresponds √† DELETE /resources/:id
   */
  deleteResource(id: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}
